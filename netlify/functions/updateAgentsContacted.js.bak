require("dotenv").config();
const { MongoClient } = require("mongodb");

const MONGO_URI = process.env.MONGODB_URI;
const DB_NAME = process.env.MONGODB_DB || "mydata";

async function upsertToBucket(db, collName, objArr) {
  if (!Array.isArray(objArr)) throw new Error("objArr must be an array");

  const coll = db.collection(collName);
  if (!coll || typeof coll.updateOne !== "function") {
    throw new Error("Invalid collection provided to upsertToBucket");
  }

  const results = [];
  for (let i = 0; i < objArr.length; i++) {
    require("dotenv").config();
    const { MongoClient } = require("mongodb");

    const MONGO_URI = process.env.MONGODB_URI;
    const DB_NAME = process.env.MONGODB_DB || "mydata";

    async function upsertToBucket(db, collName, objArr) {
      if (!Array.isArray(objArr)) throw new Error("objArr must be an array");

      const coll = db.collection(collName);
      if (!coll || typeof coll.updateOne !== "function") {
        throw new Error("Invalid collection provided to upsertToBucket");
      }

      const results = [];
      for (let i = 0; i < objArr.length; i++) {
        require("dotenv").config();
        const { MongoClient } = require("mongodb");

        const MONGO_URI = process.env.MONGODB_URI;
        const DB_NAME = process.env.MONGODB_DB || "mydata";

        async function upsertToBucket(db, collName, objArr) {
          if (!Array.isArray(objArr)) throw new Error("objArr must be an array");

          const coll = db.collection(collName);
          if (!coll || typeof coll.updateOne !== "function") {
            throw new Error("Invalid collection provided to upsertToBucket");
          }

          const results = [];
          for (let i = 0; i < objArr.length; i++) {
            const obj = objArr[i];
            const filter = { listing_id: obj.listing_id };
            try {
              const result = await coll.updateOne(filter, { $set: obj }, { upsert: true });
              results.push({ listing_id: obj.listing_id, upsertedCount: result.upsertedCount || 0, modifiedCount: result.modifiedCount || 0 });
            } catch (error) {
              results.push({ listing_id: obj.listing_id, error: error.toString() });
            }
          }
          return results;
        }

        exports.handler = async function (event) {
          // parse body
          let bodyObj;
          try {
            bodyObj = event.body ? JSON.parse(event.body) : {};
          } catch (e) {
            return { statusCode: 400, body: JSON.stringify({ error: "Invalid JSON body" }) };
          }

          const collName = bodyObj.coll || "AgentsContacted";
          const myObjArray = Array.isArray(bodyObj.myObjArray) ? bodyObj.myObjArray : [];

          if (myObjArray.length === 0) {
            return { statusCode: 400, body: JSON.stringify({ error: "myObjArray must be a non-empty array" }) };
          }

          if (!MONGO_URI) {
            return { statusCode: 500, body: JSON.stringify({ error: "Missing MONGODB_URI environment variable" }) };
          }

          const client = new MongoClient(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });
          try {
            await client.connect();
            const db = client.db(DB_NAME);

            const results = await upsertToBucket(db, collName, myObjArray);

            return {
              statusCode: 200,
              body: JSON.stringify({ message: "Upsert complete", results }),
            };
          } catch (error) {
            return { statusCode: 500, body: JSON.stringify({ error: error.toString() }) };
          } finally {
            try { await client.close(); } catch (e) { /* ignore close errors */ }
          }
        };
